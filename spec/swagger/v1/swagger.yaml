openapi: 3.0.1
info:
  title: Crowd Parlay Users API
  description: RESTful API of the Crowd Parlay's Users service.
  version: '1.0'
paths:
  /api/v1/users/register:
    post:
      tags:
        - Users
      summary: Creates a user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersRegisterRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UsersRegisterRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UsersRegisterRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UsersRegisterResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/UsersRegisterResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UsersRegisterResponse'
        '500':
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
            text/json:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/api/v1/users/{userId}':
    get:
      tags:
        - Users
      summary: Returns user with the specified ID.
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UsersGetByIdResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGetByIdResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UsersGetByIdResponse'
        '500':
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      tags:
        - Users
      summary: Updates user with the specified ID.
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UsersUpdateRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UsersUpdateResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/UsersUpdateResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UsersUpdateResponse'
        '500':
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
            text/json:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Users
      summary: Deletes user with the specified ID.
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UsersUpdateResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/UsersUpdateResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UsersUpdateResponse'
        '500':
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /api/v1/users/resolve:
    get:
      tags:
        - Users
      summary: Returns user with the specified username.
      parameters:
        - name: username
          in: query
          style: form
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UsersGetByUsernameResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGetByUsernameResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UsersGetByUsernameResponse'
        '500':
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
            text/json:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
            text/json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  schemas:
    Problem:
      type: object
      properties:
        error_description:
          type: string
      additionalProperties: false
    UsersGetByIdResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
          nullable: true
      additionalProperties: false
    UsersGetByUsernameResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
          nullable: true
      additionalProperties: false
    UsersRegisterRequest:
      type: object
      properties:
        username:
          type: string
        display_name:
          type: string
        email:
          type: string
        password:
          type: string
        avatar_url:
          type: string
          nullable: true
      additionalProperties: false
    UsersRegisterResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        display_name:
          type: string
        email:
          type: string
        avatar_url:
          type: string
          nullable: true
      additionalProperties: false
    UsersUpdateRequest:
      type: object
      properties:
        username:
          type: string
          nullable: true
        display_name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        avatar_url:
          type: string
          nullable: true
        old_password:
          type: string
          nullable: true
        new_password:
          type: string
          nullable: true
      additionalProperties: false
    UsersUpdateResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        display_name:
          type: string
        email:
          type: string
        avatar_url:
          type: string
          nullable: true
      additionalProperties: false
    ValidationProblem:
      type: object
      properties:
        error_description:
          type: string
        validation_errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      additionalProperties: false
  securitySchemes:
    OIDC:
      type: openIdConnect
      description: OpenID Connect authentication scheme.
      openIdConnectUrl: /.well-known/openid-configuration